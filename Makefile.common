SHELL = /bin/sh

CC = g++
FLAGS = -std=c++11 -g -O3 -pedantic -frounding-math -shared -fPIC \
	-Werror=int-conversion -Werror=implicit -L/usr/lib/openmpi/  \
	-Werror=return-type -Werror=uninitialized -Wall -Werror

PY_DIR     = "/usr/include/python3.6m/"
LAMMPS_DIR = "/home/stefan/projects/lammps-mine/src/"
TIMER_DIR  = "$(HOME)/projects/my_timer/lib/"
GSD_DIR    = "/usr/local/lib/"

LNK = -L./ -L$(TIMER_DIR) -lm
INC = -I./ -I$(PY_DIR) -I$(TIMER_DIR)


EXT  = cpp
SRC  = $(wildcard cpp_lib/*.$(EXT))
SRC += $(wildcard c_interface/*.$(EXT))

# Conditional flags:

ifeq ($(USE_OMP), 1)
	FLAGS += -DUSE_OPENMP -fopenmp
endif

ifeq ($(USE_EXCEPTIONS), 1)
	FLAGS += -DUSE_EXCEPTIONS
endif

ifeq ($(HAVE_LIB_CGAL), 1)
	LNK   += -lCGAL -lgmp
	FLAGS += -DHAVE_LIB_CGAL -frounding-math
endif

ifeq ($(VERBOSE_LIB), 1)
	FLAGS += -DVERBOSE_LIB
endif

ifeq ($(HAVE_LIB_ICP), 1)
	FLAGS += -DHAVE_LIB_ICP -I./libicp/ -I./libicp/src/
	SRC   += $(wildcard ./libicp/src/*.$(EXT))
endif

ifeq ($(HAVE_LIB_LAMMPS), 1)
# LAMMPS-features depend on MPI, so then it needs to be compiled with mpicxx
	CC      =  mpicxx
	LNK     += -lmpi -lmpi_cxx -llammps
	FLAGS   += -DHAVE_LIB_LAMMPS
	INC     += -I$(LAMMPS_DIR)
	LMP_SRC := $(shell ls $(LAMMPS_DIR)/manifold_*.$(EXT) | grep -v rattle)
	SRC     += $(LMP_SRC)
endif


ifeq ($(HAVE_LIB_ARMADILLO), 1)
	LNK += -larmadillo
endif

ifeq ($(HAVE_LIB_GSD), 1)
	FLAGS += -DHAVE_GSD
	INC   += -I./gsd/
	LNK   += -L./gsd -L$(GSD_DIR) -lgsd
endif

ifeq ($(HAVE_BOOST_GZIP), 1)
	FLAGS += -DHAVE_BOOST_GZIP
	LNK   += -lboost_iostreams
endif

COMP = $(CC) $(FLAGS) $(INC)
LINK = $(CC) $(FLAGS) $(INC) $(LNK)
AR   = ar rcs

OBJ_DIR = obj
OBJ = $(SRC:%.$(EXT)=$(OBJ_DIR)$(S)%.o)
OBJ_DIRS = $(dir $(OBJ))
DEPS = $(OBJ:%.o=%.d)

OBJ_GUARD = $(OBJ_DIR)$(S).guard
# For windows:
#MAKE_DIR = $(if exist $(1),,mkdir $(1))
#S=\\
# Linux and Unix-like:
MAKE_DIR = mkdir -p $(1)
S=/

LIB_DIR=/usr/local/lib
